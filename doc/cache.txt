キャッシュを使った高速化
========================

テンプレート解析結果をキャッシュする方法
テンプレートファイルの中身を解析するのは、コンピュータにとって負担がかかります。 解析した結果をファイル等に保存すること（＝キャッシュ）によって、 負荷を減らし高速な動作を行うことができるようになります。

テンプレートファイルの中身が更新された場合には、 MuMuが自動的にキャッシュを再作成します。

ファイルへキャッシュする方法

$t = MuParser::parse_from_file(テンプレートファイル名,
                               'file://' . キャッシュするディレクトリの絶対パス);
解析結果をファイルへ保存し、既存のファイルがあればその解析結果を利用します。

たとえば、こんな感じで指定します。

$t = MuParser::parse_from_file('tpl/test.tpl, 'file:///tmp/mumu_cache');
キャッシュを使うと、parse_from_fileが10倍速くらいになります。

memcachedへキャッシュする方法

まだ作っていません。待っててね。

キャッシュの自動更新を止めて、さらに高速化する方法
テンプレートファイルの中身が更新されたかどうかをチェックするために、 テンプレートファイルと、そのファイルがinclude/extendしているファイル、さらにそのファイルがinclude/extendとしているファイル…これらの全てのファイルの更新時間をチェックしています。 よって、少なくない処理時間がかかります。

この処理を行わないようにすることによって、 処理速度を高速化することができます。 ただし、MuMuが自動的にキャッシュを再作成しないようになります。 よって、テンプレートファイルを更新したときは、「テンプレートファイル名.cache」というファイル名のキャッシュファイルを削除する必要があります。キャッシュファイルが存在しない場合には、MuMuはそのcacheファイルを自動生成します。

以下のように、parse_from_fileの第3引数にfalseを指定することによって、 キャッシュの自動更新を抑制します。

$t = MuParser::parse_from_file(テンプレートファイル名,
                               'file://' . キャッシュするディレクトリの絶対パス,
                               false);
テンプレートの出力結果をキャッシュする方法
テンプレートに当てはめた結果自体をキャッシュしたいこともあります。 たとえばトップページなど、更新頻度に対して閲覧頻度が非常に高いページは、 テンプレートを当てはめた結果そのものをキャッシュし、それを表示するほうが効率的です。

MuMuは、汎用的なキャッシュ機構を実装しています（予定）。

ファイルへキャッシュする方法

まだ作っていません。待っててね。現在の実装でも、renderの結果は文字列なので、それをファイルに保存することはできます。

memcachedへキャッシュする方法

まだ作っていません。待っててね。
